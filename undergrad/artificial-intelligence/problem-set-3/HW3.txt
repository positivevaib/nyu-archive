Vaibhav A Gadodia
Artificial Intelligence - HW 3


Problem 1

Object | A  | B | C | D | E
---------------------------
Value  | 10 | 8 | 7 | 6 | 4
Weight | 8  | 4 | 3 | 3 | 1

T = 20, M = 10

Error(S) = max(Weight(S) - M, 0) + max(T - Value(S), 0)

A. Current state

S = [A, E]
Error(S) = max(9 - 10, 0) + max(20 - 14, 0) = 0 + 6 = 6

Neighbor states

Adding an object

S1 = [A, E, B]
Error(S1) = max(13 - 10, 0) + max(20 - 22, 0) = 3 + 0 = 3

S2 - [A, E, C]
Error(S2) = max(12 - 10, 0) + max(20 - 21, 0) = 2 + 0 = 2

S3 = [A, E, D]
Error(S3) = max(12 - 10, 0) + max(20 - 20, 0) = 2 + 0 = 2

Deleting an object

S4 = [A]
Error(S4) = max(8 - 10, 0) + max(20 - 10, 0) = 0 + 10 = 10

S5 = [E]
Error(S5) = max(1 - 10, 0) + max(20 - 4, 0) = 0 + 16 = 16

Swapping an object

S6 = [A, B]
Error(S6) = max(12 - 10, 0) + max(20 - 18, 0) = 2 + 2 = 4

S7 = [A, C]
Error(S7) = max(11 - 10, 0) + max(20 - 17, 0) = 1 + 3 = 4

S8 = [A, D]
Error(S8) = max(11 - 10, 0) + max(20 - 16, 0) = 1 + 4 = 5

S9 = [B, E]
Error(S9) = max(5 - 10, 0) + max(20 - 12, 0) = 0 + 8 = 8

S10 = [C, E]
Error(S10) = max(4 - 10, 0) + max(20 - 11, 0) = 0 + 9 = 9

S11 = [D, E]
Error(S11) = max(4 - 10, 0) + max(20 - 10, 0) = 0 + 10 = 10

The best neighbors of state S are S2 and S3 as both these neighbor states have the lowest errors among all neighbors and this error is lower than the error of state S.

On the next iteration the algorithm would move to either state S2 or S3 because as shown above, no neighbor states other than these two have a lower error. Therefore, the algorithm would update S to be either S2 or S3 and the choice between them would be made arbitrarily.

B. General case with N objects

The size of the state space is 2^N because in any state an object can either be in the state or not.

The maximal number of neighbors of any state is N + (N/2)^2 if N is even and N + ((N + 1)/2)^2 if N is odd. This is so because as for deletions and insertions, any state will have N options combined. And for swapping, any state of size n <= N would have n*(N - n) options. Therefore, the states with maximum neighbors would be ones where n = N/2 or n = (N + 1)/2 in case N is odd.


Problem 2

Tree

A ---> B ---> D ---> I ---> 5
   |	  |	 |
   |	  |	 |-> J ---> 7
   |	  |	 	|
   |	  |	 	|-> 9
   |	  |	 	|
   |	  |	 	|-> 2
   |	  |	 	|
   |	  |	 	|-> 6
   |	  |
   |	  |-> E ---> K ---> 8
   |	  	 |	|
   |	  	 |	|-> 12
   |	  	 |	|
   |	  	 |	|-> 9
   |	  	 |
   |	  	 |-> L ---> 2
   |	  	 	|
   |	  	 	|-> 20
   |
   |-> C ---> F ---> M ---> 8
   	  |	 	|
   	  |		|-> 15
  	  |	 	|
   	  |	 	|-> 10
   	  |
   	  |-> G ---> N ---> 3
   	  |	 |	|
   	  |	 |	|-> 7
   	  |	 |
   	  |	 |-> O ---> 12
    	  |
    	  |-> H ---> P ---> 14
   	  	 	|
   	  	 	|-> 10

Subtrees pruned

- Leaf node with value 6 in the subtree rooted at J
- Subtree rooted at L
- Leaf node with value 7 in the subtree rooted at N

The best move for MAX at the top level

A ---> C ---> F ---> M ---> 8