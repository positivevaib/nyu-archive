Vaibhav A Gadodia
Artificial Intelligence - HW 2


Problem 1

Object | A  | B | C | D | E
---------------------------
Value  | 10 | 8 | 7 | 6 | 4
Weight | 8  | 4 | 3 | 3 | 1

T = 20, M = 10

A. The complete state space

[] ---> [A] ---> [A, E]
    |
    |-> [B] ---> [B, C] ---> [B, C, D]
    |        |
    |	     |-> [B, D] ---> [B, D, E]
    |	     |
    |	     |-> [B, E]
    |
    |-> [C] ---> [C, D] ---> [C, D, E]
    |	     |
    |	     |-> [C, E]
    |
    |-> [D] ---> [D, E]
    |
    |-> [E]

B. States generated by DFS, in order

[]
[A]
[A, E]
[B]
[B, C]
[B, C, D]

The search stops at state [B, C, D] as the state value (21) meets the target value requirement T and the state weight (10) is not greater than the weight limit M.

C. States generated by BFS, in order

[]
[A]
[B]
[C]
[D]
[E]
[A, E]
[B, C]
[B, D]
[B, E]
[C, D]
[C, E]
[D, E]
[B, C, D]

The search stops at state [B, C, D] as the state value (21) is over the target value requirement T and the state weight (10) is within the legal bound M.


Problem 2

The general KNAPSACK problem

- The state space is a tree as every state comes about from a systematic operation on the previous state. Therefore, all possible states can be represented as individual nodes branching from their predecessor state.

- The depth of the state space is bounded by the number of objects with weights lower than the weight limit. In the general KNAPSACK problem, with N objects, if L of those have weights lower than the upper limit, then the upper bound on the depth is L because the deepest state that could exist is the one where all L objects together have overall weight that is below the weight limit. Since, L itself has N as its upper bound, therefore, the depth is also bounded by N, in a broader sense.

- The branching factor in this problem is L, where L is less than or equal to N and it is the total number of objects that have weights lower than the weight limit as only these objects are allowed to be the first element of a state.

- No, the depth of the shallowest goal is not known is advance because the goal states depend on multiple factors which bound different positively growing entities in opposite directions. These factors being, namely, target value T, which provides a lower bound for the state value which is a positively growing quantity as the depth increases and the max weight M, which provides an upper bound on the state weight, which also grows positively with depth.


Problem 3

A. The K-CLIQUE problem can be solved using state space search according to the following algorithm.

- STATE: Undirected subgraph of graph G, with N vertices such that all vertices are connected to each other.
- SUCCESSOR: If state S is a null graph, then add a vertex to S. Else, if the state is not null, add a vertex that is connected to all other N vertices to S, increasing the number of vertices in the state to N + 1.
- START STATE: Null graph. N = 0.
- GOAL STATE: N = K.

B. Yes, the depth of the goal states is known in advance and it is K. This is so because the goal state requires that exactly K vertices be in the graph and that all vertices satisfy the same requirements in relation to each other. This ensures that there can never be a depth where the vertex added doesn't contribute towards the goal state if a goal state indeed exists at the end of that particular path.

Since, the depth of the goal state is constant, all three search algorithms, namely, DFS, BFS and ID, would have the same running time in the worst case scenario where the goal state exists in the right most tree path. However, DFS is the most memory efficient algorithm among these three. Therefore, DFS would be the best choice here.

C. Mathematical expressions in terms of V, K and Q.

i) The depth of the state space:

Let D be the depth, then, D = Q. This is so because even though the goal state might be achieved much before ever reaching the max depth of Q, this depth is possible as there might be certain graphs such as a fully connected graph where more vertices than K and less than or equal to Q might form a Q - clique.

ii) The branching factor of the state space:

Let B be the branching factor, then, B = V as in depth 1 of the state space tree, there are V vertices as valid possibilities to add to the null graph.

iii) An upper bound on the size of the state space:

Let S be the size of the state space, then S has an upper bound equal to the sum of the series (1 + V + V(V-1) + V(V-1)(V-2) + ... + V!) as in the case of a fully connected graph, the tree would have a null graph for its root and at every depth until level V, every node at the previous depth would have all remaining vertices as its children nodes.